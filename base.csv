# Сначала тесты, которые сразу пройдены уже в коде  для примеров использования API

# > смотрите в MySuperParser как они реализованы

# тут вообще нет номеров документов, так что
BASE_SAMPLE1.1 -> NOT_FOUND 										# если вы не нашли ни одного документа, все равно явно во
BASE_SAMPLE1.2 -> INN_FL, PASSPORT_RF # возврат двух типов, с игнорированием других параметров
BASE_SAMPLE1.3 -> GRZ+ 															# важно что валидация была проверена и установлена в true
BASE_SAMPLE1.4 -> INN_UL:3456709873 		# требование предоставить какой именно номер распознан и предоставить его в правильном формате


# а это тесты квалификационные, которые надо выполнить для особого типа DocType.T1 и DocType.T2 - специальные тестовые типы
#
# T1 - это идентификатор, начинающийся на BTT1 или на BTT0 и потом имеет либо 4 цифры или 5
# дополнительная валидация по T1 - если 4 цифры, то обязательно первая - 5 , а последняя 7
#
# T2 - это идентификатор, начинающийся на BTT2 или на BTT0 и затем 4 цифры
# дополнительная валидация - среди цифр точно есть 5
#
# при нормализации у обоих типов надо убрать дефисы или подчеркивания
# > заодно должен отсечь лишний мусор в данном случае `@ ` до начала номера, найти его в строке

@ BTT15007          ->          T1+:BTT15007 # однозначный T1
@ BTT14000          ->          T1-:BTT14000 # однозначно T1, но не валидный
@ BT__T1___5_0-0-0  ->          T1-:BTT15000 # проведена нормализация, не валидный, т.к. не заканчивается на 7
@ BTT05007          ->        =?T1+,T2+      # должен понять, что тут на самом деле оба типа подходят, порядок не важен так как приоритета нет
@ BTT20500          ->          T2+          # однозначно валидный T2
@ BTT00500          ->          T2+,T1-      # должен увидеть что по грубой форматной проверке это или T1 или T2, но скорее T2, так как доп валидация показывает, что он в валидной форме
